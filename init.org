#+TITLE: JS's emacs config
#+PROPERTY: header-args :mkdirp yes :tangle ./init.el :results value silent

* General configs
** Initialization
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (setq frame-resize-pixelwise t)
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 5)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu

  (setq-default cursor-type 'bar)

  (column-number-mode) ; Add column numbers to modeline
  (global-display-line-numbers-mode t) ; Add line numbers

  ;;Disable line numbers for some modes
  (dolist (mode '(org-mode hook
                           term-mode-hook
                           shell-mode-hook
                           eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :height 140)

  ;; Set right option key to act nicely to enter symbol layers
  (setq ns-alternate-modifier 'meta)
  (setq ns-right-alternate-modifier 'none)

  ;; Make ESC quit
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Package initialization
We use =straight.el= due to greater power and flexibility, especially and/or specifically for =org-roam-ui=. [[https://github.com/raxod502/straight.el][Link]].
#+begin_src emacs-lisp

  ;; Initialize package sources
  (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  ;; Fix emacs $PATH to correspond with shell  

    (use-package exec-path-from-shell)
      (exec-path-from-shell-initialize)

#+end_src

*** early-init loading
This disables the built-in package manager from loading.
#+begin_src emacs-lisp :tangle no

  (setq package-enable-at-startup nil)

#+end_src

** Theme stuff
#+begin_src emacs-lisp

  (use-package doom-themes
    :defer t
    :init (load-theme 'doom-solarized-light t))

#+end_src
** Autocompletion stuff
#+begin_src emacs-lisp

  (use-package swiper)
  (use-package counsel)
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; Make counsel-switch-buffer the default buffer switcher
  (global-set-key (kbd "C-x b") 'counsel-switch-buffer)

#+end_src

** Modeline
#+begin_src emacs-lisp

  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 12)))

#+end_src

** Tabs
And tab bars which manage window configurations.
#+begin_src emacs-lisp
  (setq tab-bar-show t) ; Starts tab-bar-mode when having more than one tab.

  ;;  (setq tab-bar-select-tab-modifiers )
#+end_src
** Misc
*** ESC ESC ESC deradicalization
Replace the =ESC ESC ESC= command with one which does not close all other windows.
#+begin_src emacs-lisp

  (require 'cl-lib)
  (defun my-keyboard-escape-quit (fun &rest args)
    (cl-letf (((symbol-function 'one-window-p) (lambda (&rest _) t)))
      (apply fun args)))
  (advice-add 'keyboard-escape-quit :around #'my-keyboard-escape-quit)

#+end_src

*** page-break-lines
A library which displays form feed characters as horizontal rules. [[https://github.com/purcell/page-break-lines][Link]].
#+begin_src emacs-lisp
  (use-package page-break-lines)
  (global-page-break-lines-mode)
#+end_src

*** delete-selection-mode
Makes it so yanking/typing over a selected region of text deletes what is already there, to be more in line with other text editors, and fit into my workflow better.
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

*** Delete current file
#+begin_src emacs-lisp
;; based on http://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))

#+end_src

*** Saving emacs sessions
#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src
*** Paren stuff
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+end_src

*** Winner mode
Allows to undo and redo window configurations.
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

* General packages
** Rainbow delimiters
#+begin_src emacs-lisp

  ;; Uses rainbow colors for matching parens etc
  (use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))  

#+end_src

** Possible keyboard shortcuts
#+begin_src emacs-lisp

  ;; Shows possible keyboard shortcuts
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))

 #+end_src

** Projectile
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Documents/repos")
      (setq projectile-project-search-path '("~/Documents/repos")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Version control
#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge)
  (setq auth-sources '("~/.authinfo"))

#+end_src

** Pdf-mode
A better pdf reader for emacs, here specifically for use with org-noter
#+begin_src emacs-lisp

  (use-package tablist)
  (use-package pdf-tools)
  (pdf-tools-install)

#+end_src

** Window-numbering
#+begin_src emacs-lisp

  (setq winum-keymap
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-`") 'winum-select-window-by-number)
      (define-key map (kbd "s-0") 'winum-select-window-0-or-10)
      (define-key map (kbd "s-1") 'winum-select-window-1)
      (define-key map (kbd "s-2") 'winum-select-window-2)
      (define-key map (kbd "s-3") 'winum-select-window-3)
      (define-key map (kbd "s-4") 'winum-select-window-4)
      (define-key map (kbd "s-5") 'winum-select-window-5)
      (define-key map (kbd "s-6") 'winum-select-window-6)
      (define-key map (kbd "s-7") 'winum-select-window-7)
      (define-key map (kbd "s-8") 'winum-select-window-8)
      (define-key map (kbd "s-9") 'winum-select-window-8)
      map))

  (use-package winum)

  (winum-mode)
#+end_src


* Org mode
** General setup
#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-files
          '("~/Documents/repos/org/agenda")))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Agenda configuration
#+begin_src emacs-lisp

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))

  (setq org-refile-targets
        '(("~/Documents/repos/org/Archive.org" :maxlevel . 1)
          ("~/Documents/repos/org/agenda/Tasks.org" :maxlevel . 1)))

  ;; Save org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))))
#+end_src

** LaTeX processing in org
*** Basic
#+begin_src emacs-lisp
  (setq org-startup-latex-with-latex-preview t)

  (use-package org-fragtog
    :init (add-hook 'org-mode-hook 'org-fragtog-mode))

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src

$3 + 2x = 3x^2$

\[
x^{2}
\] 

*** Krofna-hack
Automatically expands upon typing a space after $ or \].
#+begin_src emacs-lisp :tangle no
  (defun krofna-hack ()
    (when (or (looking-back (rx "$ "))
              (looking-back (rx "\] ")))
      (save-excursion
        (backward-char 1)
        (org-toggle-latex-fragment))))

  (add-hook 'org-mode-hook
            (lambda ()
              (org-cdlatex-mode)
              (add-hook 'post-self-insert-hook #'krofna-hack 'append 'local)))

#+end_src

** Minor extensions
*** TODO Org-noter
Taking pdf notes org-mode that sync to inside the document.
#+begin_src emacs-lisp
  (use-package org-noter)
#+end_src

*** Anki-editor
#+begin_src emacs-lisp
  (use-package anki-editor)
  #+end_src
  
** TODO Capture templates
#+begin_src emacs-lisp

  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/Documents/repos/org/agenda/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
	
          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/Documents/repos/org/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

#+end_src

** Babel configuration
*** Initialization
#+begin_src emacs-lisp
  
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))


  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

*** Auto-tangle Configuration files
#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src



* Org-roam
** Base
#+begin_src emacs-lisp

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/repos/org/roam")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))

#+end_src
** Org-roam-ui
A package which allows one to view their nodes as a graph, using a web interface. [[https://github.com/org-roam/org-roam-ui][Link]].
#+begin_src emacs-lisp

  (use-package org-roam-ui
    :straight
      (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
     ;; :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start nil))


#+end_src
** TODO org-roam-bibtex
** Org-roam templates
The default template (and as such what we will set our templates list for now) is:
#+begin_src emacs-lisp

  (setq org-roam-capture-templates
    '(("d" "default" plain
       "%?"
       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
       :unnarrowed t)
      ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
              :unnarrowed t)
      ("b" "book notes" plain
            "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Book")
            :unnarrowed t)
      ("f" "Flashcard" plain (file "~/Documents/repos/org/roam/templates/AnkiNoteTemplate.org")
       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
         :unnarrowed t)))

#+end_src
*** An explanation:
+ "d": The "key", a letter that you press to choose the template
+ "default": The full name of the template
+ plain: The type of text being inserted, always this value for note templates
+ "%?": This is the text that will be inserted into the new note, can be anything!
+ :if-new : The list that follows this describes how the note file will be created
+ :unnarrowed t : Ensures that the full file will be displayed when captured (an Org thing)


* Languages
** Python
#+begin_src emacs-lisp

  (use-package python-mode
    :hook (python-mode . eglot)
    ;; :hook (python-mode . lsp)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3"))

    ;; Leaving the debugging stuff out for now.
    ;; (dap-python-executable "python3")
    ;; (dap-python-debugger 'debugpy)
    ;; :config
    ;; (require 'dap-python))

#+end_src

** LaTeX
Have to review all of the packages and make sure everything plays nice, and configure various interactions etc, have to see how much LSP will do by itself.
*** AUCTeX
#+begin_src emacs-lisp

  (use-package auctex
    :hook ((LaTeX-mode . prettify-symbols-mode)))

  (setq latex-run-command "xelatex")

  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
             #'TeX-revert-document-buffer)

#+end_src
*** Company-AUCTeX
#+begin_src emacs-lisp :tangle-no

  (use-package company-auctex
    :init (company-auctex-init))

#+end_src
*** CDLaTex
#+begin_src emacs-lisp

  (use-package cdlatex
    :hook (LaTeX-mode . turn-on-cdlatex)
    :bind (:map cdlatex-mode-map 
                ("<tab>" . cdlatex-tab)))

  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)


#+end_src

*** TODO LazyTab
Currently not working. Might be better just to get the actual package [[https://github.com/karthink/lazytab][Lazytab]] working.
#+begin_src emacs-lisp :tangle no

  ;; Array/tabular input with org-tables and cdlatex 
  (use-package org-table
    :after cdlatex
    :bind (:map orgtbl-mode-map
                ("<tab>" . lazytab-org-table-next-field-maybe)
                ("TAB" . lazytab-org-table-next-field-maybe))
    :init
    (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)
    ;; Tabular environments using cdlatex
    (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                          "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                          lazytab-position-cursor-and-edit
                                          nil nil t))
    (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                          "\\begin{bmatrix} ? \\end{bmatrix}"
                                          lazytab-position-cursor-and-edit
                                          nil nil t))
    (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                          "\\begin{pmatrix} ? \\end{pmatrix}"
                                          lazytab-position-cursor-and-edit
                                          nil nil t))
    (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                          "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                         lazytab-position-cursor-and-edit
                                         nil t nil))
    :config
    ;; Tab handling in org tables
    (defun lazytab-position-cursor-and-edit ()
      ;; (if (search-backward "\?" (- (point) 100) t)
      ;;     (delete-char 1))
      (cdlatex-position-cursor)
      (lazytab-orgtbl-edit))

    (defun lazytab-orgtbl-edit ()
      (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)
      (orgtbl-mode 1)
      (open-line 1)
      (insert "\n|"))

    (defun lazytab-orgtbl-replace (_)
      (interactive "P")
      (unless (org-at-table-p) (user-error "Not at a table"))
      (let* ((table (org-table-to-lisp))
             params
             (replacement-table
              (if (texmathp)
                  (lazytab-orgtbl-to-amsmath table params)
                (orgtbl-to-latex table params))))
        (kill-region (org-table-begin) (org-table-end))
        (open-line 1)
        (push-mark)
        (insert replacement-table)
        (align-regexp (region-beginning) (region-end) "\\([:space:]*\\)& ")
        (orgtbl-mode -1)
        (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))

    (defun lazytab-orgtbl-to-amsmath (table params)
      (orgtbl-to-generic
       table
       (org-combine-plists
        '(:splice t
                  :lstart ""
                  :lend " \\\\"
                  :sep " & "
                  :hline nil
                  :llend "")
        params)))

    (defun lazytab-cdlatex-or-orgtbl-next-field ()
      (when (and (bound-and-true-p orgtbl-mode)
                 (org-table-p)
                 (looking-at "[[:space:]]*\\(?:|\\|$\\)")
                 (let ((s (thing-at-point 'sexp)))
                   (not (and s (assoc s cdlatex-command-alist-comb)))))
        (call-interactively #'org-table-next-field)
        t))

    (defun lazytab-org-table-next-field-maybe ()
      (interactive)
      (if (bound-and-true-p cdlatex-mode)
          (cdlatex-tab)
        (org-table-next-field))))

#+end_src


* Programming stuff
** Flycheck
Syntax checking, seems to just work, so to speak.
#+begin_src emacs-lisp

  (use-package flycheck)
  (global-flycheck-mode)

#+end_src
** yasnippet
Snippets, configuration stolen from [[https://gist.github.com/karthink/7d89df35ee9b7ac0c93d0177b862dadb][here]]. Should look into how it works.
#+begin_src emacs-lisp

  ;; Yasnippet settings
  (use-package yasnippet)
  (yas-global-mode 1)

#+end_src

** Eglot
A more sensible and minimal LSP implementation. Using for now, might switch back over at lsp-mode at some point.
#+begin_src emacs-lisp

  (use-package project)
  (use-package eglot)

  (add-hook 'python-mode-hook 'eglot-ensure)
  ;;(add-hook 'LaTeX-mode-hook 'eglot-ensure)

#+end_src

** company-mode
Text completion framework. Seems to be working good.
#+begin_src emacs-lisp

    (use-package company)

    (add-hook 'after-init-hook 'global-company-mode)

    ;; No delay when showing suggestions
    (setq company-idle-delay 0.3)
    ;; Show suggestions after the first character is typed
    (setq company-minimum-prefix-length 1)
    ;; Make the selection wrap around
    (setq company-selection-wrap-around t)
    ;; Make tab cycle
    (company-tng-mode)

#+end_src












